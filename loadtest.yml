config:
  target: 'http://httpbin.org/'  
  phases:                        
    - duration: 1800                
      arrivalRate: 2            
      name: Load Test
  plugins:
    ensure:
      thresholds:
        - http.response_time.p95: 1000
        - http.response_time.max: 1500
      conditions:
        - expression: http.responses == 2
        - expression: http.response_time.max <1000 and http.response_time.2xx.p95 <500
scenarios:
  - name: Getting a resource
    flow:
      - get:
          url: "{{target}}get" 
      - post:
          url: "{{target}}post"  
          json:                     
            username: 'Goit'        
            password: '12345'      
          headers:                  
            Content-Type: 'application/json'   
          capture:                  
            - json: '$.json'        
              as: 'response_body'     
            - json: '$.headers.Host'  
              as: 'host'              
            - json: '$'             
              as: 'full_body'       


#arrivalRate: Bu, her saniyede iki sanal kullanıcı ekleyecektir, bu da dakikada 120 kullanıcıya denk gelir. Bu sayı, gereksinimlerimizden biraz daha 
#fazla olup, hata payı için bir delta bırakır.

#duration: 1800, Test süresi 30 dakikadır. Bu süre, tipik bir Load testi için oldukça uygun bir değerdir, ancak sistemin tipi, pazar gereksinimleri vb. 
#gibi faktörler bu süreyi değiştirebilir.

#Load testi ile başlayalım. Diyelim ki, paydaşlar, pazar analizine dayanarak, zirve saatlerde dakikada 100 kullanıcı yükü bekliyorlar. Bu ürünün tipik 
#kullanıcı akışı — bir GET isteği (örneğin, bir kimlik doğrulama isteği) ve bir POST isteği (örneğin, arama isteği) olacaktır.