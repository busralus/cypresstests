config:
  target: 'http://httpbin.org/'
  phases:
    - duration: 300
      arrivalRate: 1
      name: Scalability 1
    - duration: 300
      arrivalRate: 2
      name: Scalability 2
    - duration: 300
      arrivalRate: 3
      name: Scalability 3
    - duration: 300
      arrivalRate: 4
      name: Scalability 4
    - duration: 300
      arrivalRate: 5
      name: Scalability 5

  plugins:
    ensure:
      thresholds:
        - http.response_time.p95: 1000
        - http.response_time.max: 1500
      conditions:
        - expression: http.responses == 2
        - expression: http.response_time.max <1000 and http.response_time.2xx.p95 <500
scenarios:
  - name: Getting a resource
    flow:
      - get:
          url: "{{target}}post" 
      - post:
          url: "{{target}}post"  
          json:                     
            username: 'Goit'        
            password: '12345'      
          headers:                  
            Content-Type: 'application/json'   
          capture:                  
            - json: '$.json'        
              as: 'response_body'     
            - json: '$.headers.Host'  
              as: 'host'              
            - json: '$'             
              as: 'full_body'

#duration: 300 — mevcut yük altında sistemin stabilize olması için 5 dakika yeterlidir.
#Her 5 dakikada bir yük seviyesi artmaktadır.
#Bu tür bir testte, sistemin sunucu tarafını izlemek çok önemlidir, çünkü yük artışıyla birlikte sistem kaynaklarının kullanımındaki değişimi gözlemlemek gereklidir.
#Maalesef, Artillery raporları fazlara göre gruplayamamaktadır; yani raporda, 1. faz ile 2. faz arasındaki HTTP isteği süre farkını göremeyiz. Bunu 
#görmek için her fazı ayrı ayrı çalıştırıp sonuçları kaydetmek gerekir.
#Scalability testi genellikle sistemin çalışma aralığında yapılır.
