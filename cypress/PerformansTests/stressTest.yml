config:
  target: 'http://httpbin.org/'
  phases:
    - duration: 600
      arrivalRate: 6
      name: Stress Test
  plugins:
    ensure:
      thresholds:
        - http.response_time.p95: 1000
        - http.response_time.max: 1500
      conditions:
        - expression: http.responses == 2
        - expression: http.response_time.max <1000 and http.response_time.2xx.p95 <500
        
scenarios:
  - name: Getting a resource
    flow:
      - get:
          url: "{{target}}get" 
      - post:
          url: "{{target}}post"  
          json:                     
            username: 'Goit'        
            password: '12345'      
          headers:                  
            Content-Type: 'application/json'   
          capture:                  
            - json: '$.json'        
              as: 'response_body'     
            - json: '$.headers.Host'  
              as: 'host'              
            - json: '$'             
              as: 'full_body'  


#Stress testi, beklenen yük seviyelerinden çok daha fazla veri üretir. Ancak ne kadar fazla veri üretileceği, her sistemin mimarisi ve altyapısı farklı 
#olduğundan kesin bir cevabı yoktur. Bu tür testler aynı zamanda sistemin işlevsel sınırlarını belirlemeye yöneliktir. Bu nedenle, sistemin limitlerine 
#ulaşana kadar test yapmamız gerekecektir.

#Kullanıcı sayısını her saniye 6'ya çıkaracağız. Bu, dakikada 360 kullanıcı yapar, bu da beklenen yük seviyesinin 3.6 katına çıkar.
#Test süresi 10 dakika olarak belirlenmiştir.

#Testin sonuçlarını incelediğimizde, eğer sistem yükü hata vermeden karşılıyorsa, sanal kullanıcı sayısını artırabilir veya test süresini uzatabiliriz. 
#Er ya da geç sistem bir hata verecek ve bu durumda geliştiriciyle birlikte hatanın nedenini belirlememiz gerekecek.